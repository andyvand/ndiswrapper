#!/usr/bin/perl

#/*
#*  Copyright (C) 2005-2006 Pontus Fuchs, Giridhar Pemmasani
#*
#*
#*  This program is free software; you can redistribute it and/or modify
#*  it under the terms of the GNU General Public License as published by
#*  the Free Software Foundation; either version 2 of the License, or
#*  (at your option) any later version.
#*
#*  This program is distributed in the hope that it will be useful,
#*  but WITHOUT ANY WARRANTY; without even the implied warranty of
#*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#*  GNU General Public License for more details.
#*
#*/

use strict;
use Fcntl ':mode';
use File::Basename;
use File::Copy;
use File::Path;

my $WRAP_PCI_BUS = 5;
my $WRAP_PCMCIA_BUS = 8;
my $WRAP_USB_BUS = 15;

my %sections;
my %parsed_sections;
my $confdir = "/etc/ndiswrapper";
my $src_dir;
my $driver_name;

#Fixup list for parameters.
my %param_fixlist = ("EnableRadio|0" => "1",
		     "IBSSGMode|0" => "2",
                     "PrivacyMode|0" => "2",
		     "AdhocGMode|1" => "0");

if(@ARGV < 1) {
	usage();
	exit(1);
}

my $modconf;
if (`uname -r` =~ /(\d+)\.(\d+)\.(\d+)/) {
    if ($2 > 4) {
	if (-d "/etc/modprobe.d") {
	    $modconf = "/etc/modprobe.d/ndiswrapper"
	} else {
	    $modconf = "/etc/modprobe.conf"
	}
    } else {
	if (-d "/etc/modutils") {
	    $modconf = "/etc/modutils/ndiswrapper";
	} else {
	    $modconf = "/etc/modules.conf";
	}
    }
}

my $res;
my $dbg_file;

$dbg_file = ">/dev/null";

if ($ARGV[0] eq "-D") {
    $dbg_file = ">/tmp/ndiswrapper.dbg";
    $confdir = "/tmp/ndiswrapper";
    shift;
}

open(DBG, $dbg_file) or die "couldn't open $dbg_file: $!";

if ($ARGV[0] eq "-i" and @ARGV == 2) {
    $res = install($ARGV[1]);
} elsif ($ARGV[0] eq "-d" and @ARGV == 3) {
    $res = device_driver($ARGV[1], $ARGV[2]);
} elsif ($ARGV[0] eq "-e" and @ARGV == 2) {
    $res = remove_driver($ARGV[1]);
} elsif ($ARGV[0] eq "-l" and @ARGV == 1) {
    $res = list_drivers();
} elsif ($ARGV[0] eq "-m" and @ARGV == 1) {
    $res = modalias();
} elsif ($ARGV[0] eq "-v" and @ARGV == 1) {
    printf "utils "; system("/sbin/loadndisdriver -v");
    printf "driver ";
    system("modinfo ndiswrapper | grep -E '^version|^vermagic'");
    $res = 0;
} elsif ($ARGV[0] eq "-da" and @ARGV == 1) {
    $res = genmoddevconf(0);
} elsif ($ARGV[0] eq "-di" and @ARGV == 1) {
    $res = genmoddevconf(1);
} else {
    usage();
}
close(DBG);
exit $res;

sub usage() {
    print "usage: ndiswrapper OPTION\n\n" .
      "install/manage Windows drivers for ndiswrapper.\n"  .
	"-i inffile        install driver described by 'inffile'\n" .
	"-d devid driver   use installed 'driver' for 'devid'\n" .
	"-e driver         remove 'driver'\n" .
	"-l                list installed drivers\n" .
	"-m                write configuration for modprobe\n" .
	"-da               write module alias configuration for all devices\n" .
	"-di               write module install configuration for all devices\n" .
	"-v                report version information\n" .
	"\n\nwhere 'devid' is either PCIID or USBID of the form XXXX:XXXX\n";
}

sub remove_driver {
    my $driver = shift;
    if (!rmtree("$confdir/$driver", 0, 1)) {
	warn "couldn't delete $confdir/$driver\n";
    }
    return 0;
}

sub install {
    my $inf = shift;
    $src_dir = dirname($inf);
    $driver_name = lc(basename($inf));
    $driver_name =~ s/\.inf//;
    chomp($driver_name);

    if (! -d $confdir) {
	mkdir($confdir) or die "couldn't create $confdir: $!";
    }
    (-d "$confdir/$driver_name") and
      die "driver $driver_name is already installed\n";
    mkdir("$confdir/$driver_name") or
      die "couldn't create $confdir/$driver_name: $!";
    print "installing $driver_name ...\n";
    read_sections($inf);
    parse_section("Strings");
    parse_section("Version");
    parse_mfr();
    copy_file(basename($inf));
    return 0;
}

# return lines in section
sub get_section {
    my $name = shift;
    foreach my $key (keys %sections) {
	if (lc($key) eq lc($name)) {
	    return @{$sections{$key}};
	}
    }
    printf DBG "couldn't find section $name\n";
    return ();
}

# Load inf and split into different sections.
sub read_sections {
    my $filename = shift;
    open(INF, $filename) or die "couldn't open $filename: $!";

    my $name = "none";
    my $i = 0;
    $sections{$name} = ();
    while (my $line = <INF>) {
	#Convert from unicode
	$line =~ s/\xff\xfe//;
	$line =~ s/\0//g;

	$line =~ s/^\s*//;
	$line =~ s/\s*$//;
	next if (length($line) == 0);
	if ($line =~ /^\[(.+)\]/) {
	    $name = $1;
	    $sections{$name} = ();
	    $i = 0;
	} else {
	    $sections{$name}[$i++] = $line;
	}
    }
    close(INF);
    foreach $name (keys %sections) {
	printf DBG "section: %s\n", $name;
	foreach my $line (@{$sections{$name}}) {
	    printf DBG "%s: %s\n", $name, $line;
	}
    }
}

sub parse_section {
    my $name = shift;
    my @lines = get_section($name);
    if (!@lines) {
	return;
    }
    $parsed_sections{$name} = {};
    foreach my $line (@lines) {
	(my $key, my $val) = parse_key_value($line);
	if ($key) {
	    $val = strip_quotes($val);
	    $parsed_sections{$name}->{$key} = $val;
	    printf DBG "$name: %s = %s\n", $key, $val;
	}
    }
}

sub parse_mfr() {
    my @lines = get_section("Manufacturer");
    foreach  my $line (@lines) {
	(my $strkey, my $val) = parse_key_value($line);
	if ($strkey) {
	    (my $models, my @targets) = split(",", $val);
	    if ($models) {
		my $target_os = find_target_os(@targets);
		printf DBG "mfr: %s, %s, %s\n", $line, $models, $target_os;
		parse_models($models, $target_os);
	    }
	}
    }
}

sub parse_models {
    (my $models, my $os) = @_;
    my @lines = get_section($models . "." . $os);
    if (@lines eq 0) {
	@lines = get_section($models);
	if (@lines eq 0) {
	    return;
	}
    }
    foreach my $line (@lines) {
	$line = del_comment($line);
	next if (length($line) eq 0);
	(my $dev_desc, my $val) = parse_key_value($line);
	my @fields = split(",", $val);
	if (@fields le 1) {
	    printf "couldn't find install directive: %s\n", $line;
	    next;
	}
	my $install_section = $fields[0];
	my $hwid = $fields[1];
	# TODO: deal with compatible IDs as hwid?
	(my $bus_type, my $vendor, my $device, my $subvendor, my $subdevice) =
	  parse_hwid($hwid);
	next if (!$vendor);
	printf DBG "models: %s, %s\n", $install_section, $hwid;
	parse_install($bus_type, $install_section, $os, $vendor, $device,
		      $subvendor, $subdevice);
    }
}

sub parse_install {
    (my $bus_type, my $secn, my $os, my $vendor, my $device, my $subvendor,
     my $subdevice) = @_;
    my @lines = get_section($secn . "." . $os);
    if (@lines eq 0) {
	@lines = get_section($secn);
    }
    if (@lines eq 0) {
	printf "couldn't find install section \"%s\"\n", $secn;
	return -1;
    }

    my $filename = "$vendor:$device";
    if ($subvendor) {
	$filename .= ":$subvendor:$subdevice"
    }
    $filename .= sprintf(".%X.conf", $bus_type);

    open(CONF, ">$confdir/$driver_name/$filename") or
      die "unable to create file $filename: $!";

    my $version = get_section_value("Version", "DriverVer");
    my $provider = get_section_value("Version", "Provider");
    my $classguid = get_section_value("Version", "ClassGUID");
    my $providerstring = trim(strip_quotes(get_string_value(trim($provider))));

    printf CONF "NdisVersion|0x50001\n";
    printf CONF "Environment|1\n";
    printf CONF "class_guid|%s\n", $classguid;
    printf CONF "mac_address|XX:XX:XX:XX:XX:XX\n";
    printf CONF "driver_version|%s,%s\n", $providerstring, $version;
    printf CONF "\n";
    close(CONF);

    open(CONF, "|sort|uniq >>$confdir/$driver_name/$filename") or
      die "couldn't create file $filename: $!";

    foreach my $line (@lines) {
	$line =~ s/^;\s*//;
	$line = trim(del_comment($line));
	(my $key, my $val) = parse_key_value($line);
	if ($key) {
	    if (lc($key) eq "addreg") {
		my @addregs = split(",", $val);
		foreach my $reg (@addregs) {
		    parse_registry(trim($reg));
		}
	    } elsif (lc($key) eq "copyfiles") {
		printf DBG "copyfiles: %s\n", $val;
		my @copy_files = split(",", $val);
		foreach my $copy_file (@copy_files) {
		    my @copy_sec = split(",", $copy_file);
		    foreach my $file (@copy_sec) {
			parse_copy_files(trim($file));
		    }
		}
	    }
	}
    }
    close(CONF);
}

sub get_section_value {
    (my $secn, my $name) = @_;
    return $parsed_sections{$secn}->{$name};
}

sub get_string_value {
    my $key = shift;
    if ($key =~ /%(.+)%/) {
	$key = $1;
	return get_section_value("Strings", $key);
    } else {
	return $key;
    }
}

sub parse_registry {
    my $reg = shift;
    my $conf = shift;
    my @lines = get_section($reg);
    if (@lines eq 0) {
	printf "parse error in inf; unable to find section $reg\n";
	return -1;
    }

    foreach my $line (@lines) {
	$line = del_comment($line);
	my @fields = split(",", $line);
	next if (@fields lt 4);
	my $value;
	my $param = trim($fields[1]);
	if ($param =~ /ndi\\params\\(.+)/i) {
	    $param = strip_quotes(trim($1));
	    $param =~ s/\\.*$//;
	    next if (lc(trim($fields[2])) ne "default");
	    $value = strip_quotes(trim($fields[4]));
	} else {
	    $param = strip_quotes(trim($fields[2]));
	    next if (length($param) eq 0);
	    $value = strip_quotes(trim($fields[4]));
	}
	$value = get_string_value($value);
	if (length($param) gt 0 and $param ne "BusType") {
	    if ($param_fixlist{"$param|$value"}) {
		my $orig_value = $value;
		$value = $param_fixlist{"$param|$value"};
		printf "forcing parameter $param from $orig_value to $value\n";
	    }
	    printf CONF "%s|%s\n", $param, $value;
	}
    }
}

sub parse_copy_files {
    my $copy_name = shift;

    if ($copy_name =~ /^\@/) {
	$copy_name =~ s/^\@//;
	return copy_file($copy_name);
    }

    my @lines = get_section($copy_name);
    foreach my $line (@lines) {
	$line = trim($line);

	my @files = split(",", $line);
	if (@files == 0) {
	    printf DBG "copyfiles section $copy_name has no files\n";
	    return -1;
	}
	my $file;
	if (@files > 1 and length($files[1]) > 0) {
	    $file = $files[1];
	} else {
	    $file = $files[0];
	}
	$file = trim($file);
	if ($file and length($file) > 0) {
	    printf DBG "copyfile: %s, %s\n", $copy_name, $file;
	    copy_file($file);
	}
    }
    return 0;
}

sub copy_file {
    my $file = shift;

    $file = trim(del_comment($file));
    my $real_file = get_file($file);
    if (length($real_file) gt 0) {
	$file = lc($real_file);
	copy("$src_dir/$real_file", "$confdir/$driver_name/$file") or
	  warn "couldn't copy \"$real_file\" to \"$confdir/$driver_name\": $!";
	chmod(0644, "$confdir/$driver_name/$file");
    } else {
	warn "couldn't find \"$file\" in \"$src_dir\"; make sure " .
	  "all driver files, including .inf, .sys (and .bin, if any) " .
	    "are in \"$src_dir\"\n";
    }
}

# find a file in a case-insensitive way.
sub get_file {
    my $file = shift;
    if (opendir(DIR, "$src_dir")) {
	my @allfiles = readdir(DIR);
	foreach my $real_file (@allfiles) {
	    if (lc($real_file) eq lc($file)) {
		closedir(DIR);
		return $real_file;
	    }
	}
    } else {
	printf "unable to open \"%s\"\n", $src_dir;
    }
    closedir(DIR);
    return "";
}

sub parse_hwid {
    my $hwid = uc(shift);
    if ($hwid =~ /PCI\\VEN_(\w+)&DEV_(\w+)&SUBSYS_(\w{4})(\S{4})/) {
	return ($WRAP_PCI_BUS, $1, $2, $4, $3);
    } elsif ($hwid =~ /PCI\\VEN_(\w+)&DEV_(\w+)/) {
	return ($WRAP_PCI_BUS, $1, $2);
    } elsif ($hwid =~ /USB\\VID_(\w+)&PID_(\w+)/) {
	return ($WRAP_USB_BUS, $1, $2);
    } else {
	return 0;
    }
}

sub find_target_os() {
    my @targets = @_;
    my $arch = `uname -m`;
    my $target;
    if ($arch eq "x86_64") {
	$target = "NTamd64";
    } else {
	$target = "NTx86";
    }
    foreach my $os (@targets) {
	$os =~ /([^.]+)\.([^.]+)\.(.+)/;
	if (lc($1) eq lc($target)) {
	    return $os;
	}
    }
    return "NT";
}

sub strip_quotes {
    my $s = shift;
    $s =~ s/"(.*)"/$1/;
    return $s;
}

sub parse_key_value {
    my $line = shift;

    $line = del_comment($line);
    if ($line =~ /([^=]+)=(.+)/) {
	return (trim($1), trim($2));
    } else {
	return 0;
    }
}

sub del_comment {
    my $s = shift;
    $s =~ s/;.*//;
    return $s;
}

# remove whitsepace at front and end.
sub trim {
    my $s = shift;
    $s =~ s/^\s*//;
    $s =~ s/\s*$//;
    return $s;
}

sub device_driver {
    my ($devid, $driver) = @_;
    my $done = 0;

    $devid = uc($devid);
    if (!($devid =~ /[0-9A-Z]{4}:[0-9A-Z]{4}/)) {
	printf "'$devid' is not a valid device ID\n";
	return 1;
    }
    open(LS, "ls -1 $confdir/$driver/ |") or
      die "couldn't open $confdir/$driver: $!";
    while (my $f = <LS>) {
	chomp($f);
	if ($f =~ /\.([0-9A-F]+).conf$/) {
	    if (symlink("$f", "$confdir/$driver/$devid.$1.conf")) {
		printf "driver '$driver' is used for '$devid'\n";
		$done = 1;
		last;
	    } else {
		warn "couldn't create symlink for $f\n";
	    }
	}
    }
    close(LS);
    if ($done == 0) {
	printf "driver '$driver' is not installed (properly)!\n";
	return 1;
    }
    return 0;
}

sub genmoddevconf {
    my $mode = shift;
    my $vendor, my $device, my $subvendor, my $subdevice, my $bustype, my $busid;
    my $line;

    my $moddevconf;
    if (-d "/etc/modprobe.d") {
	$moddevconf = "/etc/modprobe.d/ndiswrapper";
    } elsif (-d "/etc/modules.d") {
	$moddevconf = "/etc/modules.d/ndiswrapper";
    } else {
	$moddevconf = "/etc/ndiswrapper/ndiswrapper";
    }

    open(CONF, "| sort >$moddevconf") or
      die "unable to create modules alias file $moddevconf: $!";
    open(LS, "ls -1 $confdir|") or
      die "unable to open $confdir: $!";
    while (my $driver = <LS>) {
	chomp($driver);
	my $stat = (stat("$confdir/$driver"))[2];
	if (S_ISDIR($stat)) {
	    open(LS2, "ls -1 $confdir/$driver/ |") or
	      die "unable to open $confdir/$driver: $!";
	    while (my $file = <LS2>) {
		chomp ($file);
		my $line = $file;
		if ($file =~ s/.conf//) {
		    if ($file =~ /(.{4}):(.{4}):(.{4}):(.{4})\.([05F])/) {
			$vendor = $1;
			$device = $2;
			$subvendor = "0000$3";
			$subdevice = "0000$4";
			$busid = "$5";
		    } elsif($file =~ /(.{4}):(.{4})\.([05F])/) {
			$vendor = $1;
			$device = $2;
			$subvendor = "*";
			$subdevice = "*";
			$busid = "$3";
		    }
		    my $devstring;
		    if ($busid eq "0" or $busid eq "F") {
			$devstring = sprintf("usb:v%sp%sd*dc*dsc*dp*ic*isc*ip*",
					     $vendor, $device);
		    } elsif ($busid eq "5") {
			$devstring = sprintf("pci:v0000%sd0000%ssv%ssd%sbc*sc*i*",
					     $vendor, $device, $subvendor,
					     $subdevice);
		    } else {
			warn "wrong bustype ($busid) for " .
			  "configuration file $line - ignoring it\n";
			next;
		    }
		    if ($mode == 0) {
			printf CONF "alias %s ndiswrapper\n", $devstring;
		    } else {
			printf CONF "install %s /sbin/modprobe ndiswrapper\n",
			  $devstring;
		    }
		}
	    }
	    close(LS2);
	}
    }

    close(CONF);
    close(LS);

    printf "module configuration information is stored in $moddevconf\n";
    return 0;
}

sub list_drivers {
    my $s;
    my $cards = get_cards();

    open(LS, "ls -1 $confdir|") or die "couldn't open $confdir: $!";
    while (my $driver = <LS>) {
	chomp($driver);
	if (-e "$confdir/$driver") {
	    $s .= "$driver\t". install_status($cards, $driver) . "\n";
	}
    }
    close(LS);
    if ($s) {
	printf "installed drivers:\n$s";
    } else {
	printf "no drivers installed\n$s";
    }
    return 0;
}

sub modalias {
    my $alias = 0;

    open(MODPROBE, "modprobe -c|") or die "couldn't run modprobe: $!";
    while (my $line = <MODPROBE>) {
	if ($line =~ /^alias\s.+\sndiswrapper/) {
	    printf "modprobe config already contains alias directive\n\n";
	    $alias = 1;
	} elsif ($line =~ /^install\s.*ndiswrapper/) {
	    warn "module configuration contains directive $line;" .
	      "you should delete that";
	} elsif ($line =~ /^post-install\s+ndiswrapper/) {
	    warn "module configuration contains directive $line;" .
	      "you should delete that";
	}
    }
    close(MODPROBE);

    if ($alias) {
	return 0;
    }

    printf "adding \"alias wlan0 ndiswrapper\" to $modconf ...\n";
    system("echo \"alias wlan0 ndiswrapper\" >>$modconf") or
      die "couldn't add module alias: $!";
    if (-x "/sbin/update-modules") {
	return system("/sbin/update-modules");
    }
    return 0;
}

sub get_cards {
#01:00.0 Class 0300: 1002:4c66 (rev 01)
#        Subsystem: 1043:1732
    my @cards;
    my @lspci = ("/sbin/lspci", "/usr/sbin/lspci", "lspci");
    foreach my $cmd (@lspci) {
	if (open(LSPCI, "$cmd -vn|")) {
	    my $card;
	    while(my $line = <LSPCI>) {
		if($line =~ /^[0-9]+.*:\s(.{4}):(.{4}).*/) {
		    my %c;
		    $card = \%c;
		    $card->{vendor} = $1;
		    $card->{device} = $2;
		}
		if ($line =~ /.+Subsystem:\s*(.{4}):(.{4}).*/) {
		    $card->{subvendor} = $1;
		    $card->{subdevice} = $2;
		    push(@cards, $card);
		}
	    }
	    last;
	}
    }

    my @lsusb = ("/sbin/lsusb", "/usr/sbin/lsusb", "lsusb");
    foreach my $cmd (@lsusb) {
	if (open(LSUSB, "$cmd |")) {
	    my $card;
	    while(my $line = <LSUSB>) {
		if($line =~ /.*: ID\s(.{4}):(.{4}).*/) {
		    my %c;
		    $card = \%c;
		    $card->{vendor} = $1;
		    $card->{device} = $2;

		    push(@cards, $card);
		}
	    }
	    last;
	}
    }
    return \@cards;
}

sub install_status {
    my ($cards, $driver) = @_;

    my $sys = 0;
    my $conf = 0;
    my $inf = 0;

    if (!$cards) {
	return;
    }

    open(LS2, "ls -1 $confdir/$driver|") or
      die "couldn't open $confdir/$driver: $!";

    while (my $device = <LS2>) 	{
	chomp($device);
	my $d = $device;

	$sys = 1 if $d =~ /\.sys$/;
	$inf = 1 if $d =~ /\.inf$/;
	$conf = 1 if $conf eq 0 and $d =~ /\.conf$/;
	$d =~ s/.conf//;
	if ($d =~ /(.{4}):(.{4}):(.{4}):(.{4})/) {
	    for (my $i = 0; $$cards[$i]; $i++) {
		if ($$cards[$i]->{vendor} == $1 and
		    $$cards[$i]->{device} == $2 and
		    $$cards[$i]->{subvendor} == $3 and
		    $$cards[$i]->{subdevice} == $4) {
		    $conf = 3;
		    last;
		}
	    }
	} elsif($d =~ /(.{4}):(.{4})/) {
	    for (my $i = 0; $$cards[$i]; $i++) {
		if ($$cards[$i]->{vendor} == $1 and
		    $$cards[$i]->{device} == $2) {
		    my $stat = (lstat("$confdir/$driver/$device"))[2];
		    if (S_ISLNK($stat)) {
			$conf = 2;
		    } else {
			$conf = 3;
		    }
		    last;
		}
	    }
	}
    }
    close(LS2);

    my $ret;
    if ($sys eq 0 || $inf eq 0 || $conf eq 0) {
	$ret = "invalid driver!";
    } else {
	$ret = "\tdriver installed " if $conf eq 1;
	$ret = "\tdriver installed, hardware present " if $conf eq 2;
	$ret = "\tdriver installed, hardware present " if $conf eq 3;
    }
    return $ret;
}
